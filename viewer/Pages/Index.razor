@page "/"

@inject IJSRuntime JSRuntime
@inject HttpClient Http

@using System.Threading
@using viewer.Components

@if (messages.Count == 0)
{
    <p><em>Fetching images. please wait...</em></p>
}
else
{
    <div class="demo-cont">
        <div class="fnc-slider example-slider">
            <div class="fnc-slider__slides">
                @{
                    var idx = 0;
                    foreach (var image in messages)
                    {
                        bool isActive = idx == activeSlideId;
                        bool isPrev = isPrevious(idx);

                        <Slide isActive="@isActive" isPrev="isPrev" blendType="@image.Value.BlendType" name="@image.Value.Name" image="@image.Value.ImageUrl" />
                        idx++;
                    }
                }
            </div>
            <nav class="fnc-nav">
                <div class="fnc-nav__bgs">
                    @{
                        var nav_bg_idx = 0;
                        foreach (var image in messages)
                        {
                            string activeNav = nav_bg_idx == activeSlideId ? "m--active-nav-bg" : "";
                            string prevNav = isPrevious(nav_bg_idx) ? "m--previous-nav-bg" : "";
                            <div class="fnc-nav__bg @activeNav @prevNav @bgBlendType(@image.Value.BlendType) @bgIsActive(@image.Value.IsActive)"></div>
                            nav_bg_idx++;
                        }
                    }
                </div>
                <div class="fnc-nav__controls">
                    @{
                        var control_idx = 0;
                        foreach (var image in messages)
                        {
                            string activeControl = control_idx == activeSlideId ? "m--active-control" : "";
                            string prevControl = isPrevious(control_idx) ? "m--prev-control" : "";
                            <button class="fnc-nav__control @activeControl @prevControl" >
                                @image.Value.Name
                                <span class="fnc-nav__control-progress" style="transition: transform 5.66667s ease 0s;"></span>
                            </button>
                            control_idx++;
                        }
                    }
                </div>
            </nav>
        </div>
    </div>
}

@code {
    private bool initializeJs = true;
    private bool initialized;
    private Dictionary<long, MessageEntity> messages = new Dictionary<long, MessageEntity>();

    private bool inTimer = false;
    private readonly int checkNewImageInterval = 10000;
    private readonly int slideingInterval = 5000;

    private int activeSlideId = 0;
    private bool isSetPrev = false;

    private bool isPrevious(int idx)
    {
        if (!isSetPrev)
        {
            return false;
        }
        if (activeSlideId == 0 && idx == (messages.Count - 1))
        {
            return true;
        }
        else if (idx == (activeSlideId - 1))
        {
            return true;
        }
        return false;
    }

    private async Task AddSlide()
    {
        var tmp_messages = await Http.GetFromJsonAsync<MessageEntity[]>("https://satoweddingphotosharing.azurewebsites.net/api/FetchImage");
        foreach (var msg in tmp_messages)
        {
            if (!messages.ContainsKey(msg.Id))
            {
                messages.Add(msg.Id, msg);
            }
        }
        initializeJs = false;
        initialized = false;
    }

    private string bgBlendType(Slide.BlendType blendType)
    {
        string result = "";
        switch (blendType)
        {
            case Slide.BlendType.Green:
                result = "m--navbg-green";
                break;
            case Slide.BlendType.Dark:
                result = "m--navbg-dark";
                break;
            case Slide.BlendType.Red:
                result = "m--navbg-red";
                break;
            case Slide.BlendType.Blue:
                result = "m--navbg-blue";
                break;
        }
        return result;
    }
    private string bgIsActive(bool isActive)
    {
        return isActive ? "m--active-nav-bg" : "";
    }

    private async Task HandleTimerCallback(object state)
    {
        if (inTimer)
        {
            return;
        }
        inTimer = true;
        await AddSlide();
        this.StateHasChanged();
        inTimer = false;
    }

    private void ChangeSlide(object state)
    {
        isSetPrev = true;
        activeSlideId++;
        if ((activeSlideId+1) > messages.Count)
        {
            activeSlideId = 0;
        }
        this.StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var tmp_messages = await Http.GetFromJsonAsync<MessageEntity[]>("https://satoweddingphotosharing.azurewebsites.net/api/FetchImage");

            int i = 0;
            foreach (var msg in tmp_messages)
            {
                msg.IsActive = i == 0;  // TODO:
                messages.Add(msg.Id, msg);
                i++;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }

        new Timer(o => ChangeSlide(o), null, slideingInterval, slideingInterval);
        new Timer(async o => await HandleTimerCallback(o), null, checkNewImageInterval, checkNewImageInterval);
    }

    public class MessageEntity
    {
        public long Id { get; set; }

        public string Name { get; set; }

        public string Message { get; set; }

        public string ImageUrl { get; set; }

        public string ThunbnailImageUrl { get; set; }

        public string RawImageUrl { get; set; }

        public bool IsActive { get; set; }
        public string BlendTypeString { get; set; }
        public Slide.BlendType BlendType
        {
            get
            {
                Slide.BlendType result = Slide.BlendType.Green;
                switch (BlendTypeString)
                {
                    case "Green":
                        result = Slide.BlendType.Green;
                        break;
                    case "Dark":
                        result = Slide.BlendType.Dark;
                        break;
                    case "Red":
                        result = Slide.BlendType.Red;
                        break;
                    case "Blue":
                        result = Slide.BlendType.Blue;
                        break;
                }
                return result;
            }
        }
    }
}